/*
 * money-transfer simulation
 * money-transfer simulation restful api
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.moneytransfer.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Objects;

public class Transfer {

    @NotNull(message = "debit user id is mandatory")
    @Size(min=36,max=36)
    @JsonProperty("debit-user-id")
    private String debitUserId = null;

    @NotNull(message = "debit account id is mandatory")
    @Size(min=36,max=36)
    @JsonProperty("debit-account-id")
    private String debitAccountId = null;

    @NotNull(message = "credit user id is mandatory")
    @Size(min=36,max=36)
    @JsonProperty("credit-user-id")
    private String creditUserId = null;

    @NotNull(message = "credit account id is mandatory")
    @Size(min=36,max=36)
    @JsonProperty("credit-account-id")
    private String creditAccountId = null;

    @NotNull(message = "amount is mandatory")
    @DecimalMin(value = "0", message = "amount must be positive")
    @DecimalMax(value = "5000", message = "max transfer is 5000")
    @JsonProperty("amount")
    private BigDecimal amount = null;

    public Transfer() {
    }

    public Transfer(String debitUserId, String debitAccountId, String creditUserId, String creditAccountId, BigDecimal amount) {
        this.debitUserId = debitUserId;
        this.debitAccountId = debitAccountId;
        this.creditUserId = creditUserId;
        this.creditAccountId = creditAccountId;
        this.amount = amount;
    }

    public String getDebitAccountId() {
        return debitAccountId;
    }

    public String getDebitUserId() {
        return debitUserId;
    }

    public void setDebitUserId(String debitUserId) {
        this.debitUserId = debitUserId;
    }

    public void setDebitAccountId(String debitAccountId) {
        this.debitAccountId = debitAccountId;
    }

    public Transfer creditAccountId(String creditAccountId) {
        this.creditAccountId = creditAccountId;
        return this;
    }

    public String getCreditUserId() {
        return creditUserId;
    }

    public void setCreditUserId(String creditUserId) {
        this.creditUserId = creditUserId;
    }

    public String getCreditAccountId() {
        return creditAccountId;
    }

    public void setCreditAccountId(String creditAccountId) {
        this.creditAccountId = creditAccountId;
    }

    public Transfer amount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transfer transfer = (Transfer) o;
        return Objects.equals(this.debitAccountId, transfer.debitAccountId) &&
                Objects.equals(this.creditAccountId, transfer.creditAccountId) &&
                Objects.equals(this.amount, transfer.amount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(debitAccountId, creditAccountId, amount);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Transfer {\n");

        sb.append("    debitAccountId: ").append(toIndentedString(debitAccountId)).append("\n");
        sb.append("    creditAccountId: ").append(toIndentedString(creditAccountId)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
